// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
Name: Curtis Kauer
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //c instruction case to store in A register
    And(a=instruction[15], b=instruction[5], out=cInstructA);
    //a instruction case (Always stores)
    Not(in=instruction[15], out=isA);
    //Either or both cases means load into A register
    Or(a=cInstructA, b=isA, out=Aload);
    ARegister(in=instruct, load=Aload, out=AregOutput, out[0..14]=addressM);

    // c isntruction case to store in D register
    And(a=instruction[15], b=instruction[4], out=cInstructD);
    DRegister(in=ALUoutput, load=cInstructD, out=DregOutput);


    ALU(x=DregOutput, y=AregOrinM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUoutput, out=outM, zr=zr, ng=ng);

    //instructions inputted pass only if the instruction is an a instruction
    Mux16(a=ALUoutput, b=instruction, sel=isA, out=instruct);

    //determine if y for ALU is either A register output or incoming M value
    And(a=instruction[15], b=instruction[12], out=inMSelector);
    Mux16(a=AregOutput, b=inM, sel=inMSelector, out=AregOrinM);

    //writeM = write to memory if d3 = 1 and is c instruction
    And(a=instruction[3], b=instruction[3], out=cInstructM);
    And(a=instruction[15], b=cInstructM, out=writeM);

    //ALU output = positive if not 0 or negative
     Not(in=ng, out=notng);
     Not(in=zr, out=notzr);
     And(a=notng, b=notzr, out=pos);
    
    //checking jump instructions and corresponding effects
     And(a=instruction[0], b=pos, out=checkpositive);
     And(a=instruction[1], b=zr, out=checkzero);
     And(a=instruction[2], b=ng, out=checknegative);
    
    //if any instructions correspond to their effects, load into PC
     Or(a=checkpositive, b=checkzero, out=positiveorzero);
     Or(a=positiveorzero, b=checknegative, out=preload);
    
    //check if c instruction
     And(a=instruction[15], b=preload, out=notinc, out=load);
     Not(in=notinc, out=inc);

     PC(in=AregOutput, load=load, inc=inc, reset=reset, out[0..14]=pc);
}